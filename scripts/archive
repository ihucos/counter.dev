#!/usr/bin/env python3

from redis import StrictRedis
from urllib.parse import unquote
import sqlite3

conn = sqlite3.connect("database.sqlite3")
# conn = sqlite3.connect(":memory:")

conn.execute(
    """
CREATE TABLE IF NOT EXISTS record (
    user TEXT,
    site TEXT,
    date TEXT,
    dimension TEXT,
    type TEXT,
    count integer,
    unique(user, site, date, dimension, type)
)"""
)

conn.execute("CREATE INDEX IF NOT EXISTS idx_record_user ON record (user)")
conn.execute("CREATE INDEX IF NOT EXISTS idx_record_site ON record (site)")
conn.execute("CREATE INDEX IF NOT EXISTS idx_record_date ON record (date)")
conn.execute("CREATE INDEX IF NOT EXISTS idx_record_dimension ON record (dimension)")
conn.execute("CREATE INDEX IF NOT EXISTS idx_record_type ON record (type)")


r = StrictRedis()

ZET_TYPE = ["lang", "ref", "loc", "origin"]


def unparse_redis_key(redis_key):
    """
    Example:
    In: v:counter.dev,counter,date,2022-05-26
    Out: ('counter.dev', 'counter, 'date', '2022-05-26')
    """
    return list(unquote(i) for i in redis_key[2:].decode().split(","))


def process_redis_keys(keys):

    # Load values assigned to the keys
    pipe = r.pipeline()
    parts_list = []
    for key in keys:
        parts = unparse_redis_key(key)
        parts_list.append(parts)
        _, _, field, _ = parts
        if field in ZET_TYPE:
            pipe.zrange(key, 0, -1, withscores=True)
        else:
            pipe.hgetall(key)
    results = pipe.execute()

    # Write values to sqlite database
    for parts, result in zip(parts_list, results):
        origin, user_id, field, time_range = parts
        for key, value in dict(result).items():
            conn.execute(
                """INSERT OR REPLACE INTO record (user, site, date, dimension, type, count)
                   VALUES(?, ?, ?, ?, ?, ?)""",
                (user_id, origin, field, time_range, key, value),
            )


cursor = 0
while True:
    cursor, results = r.scan(cursor, match="v:*,*,*,*-*-*", count=100)
    process_redis_keys(results)
    if not cursor:
        break

conn.commit()
